{"version":3,"sources":["views/Counter/Counter.js","containers/CounterContainer.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","overrides","MuiIconButton","root","background","padding","margin","MuiTypography","body1","fontSize","textAlign","Counter","props","react_default","a","createElement","ThemeProvider","Typography","count","className","IconButton","onClick","decreaseCount","Remove_default","resetCount","Replay_default","increaseCount","Add_default","CounterContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","state","views_Counter_Counter","Component","App","containers_CounterContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sVAWMA,SAAQC,YAAe,CAC3BC,UAAW,CACTC,cAAe,CACbC,KAAM,CACJC,WAAY,mDACZC,QAAS,OACTC,OAAQ,WAGZC,cAAe,CACbC,MAAO,CACLC,SAAU,OACVC,UAAW,eAgCJC,EA1BC,SAAAC,GACd,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAejB,MAAOA,GACpBc,EAAAC,EAAAC,cAACE,EAAA,EAAD,KAAaL,EAAMM,OACnBL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aACbN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYC,QAAST,EAAMU,eACzBT,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,OAEFD,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYC,QAAST,EAAMY,YACzBX,EAAAC,EAAAC,cAACU,EAAAX,EAAD,OAEFD,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYC,QAAST,EAAMc,eACzBb,EAAAC,EAAAC,cAACY,EAAAb,EAAD,UCRKc,cA7Bb,SAAAA,EAAYhB,GAAO,IAAAiB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMpB,KAMRc,cAAgB,WACdG,EAAKO,SAAS,CAAElB,MAAOW,EAAKQ,MAAMnB,MAAQ,KARzBW,EAUnBL,WAAa,WACXK,EAAKO,SAAS,CAAElB,MAAO,KAXNW,EAanBP,cAAgB,WACdO,EAAKO,SAAS,CAAElB,MAAOW,EAAKQ,MAAMnB,MAAQ,KAZ1CW,EAAKQ,MAAQ,CACXnB,MAAO,GAHQW,wEAkBjB,OACEhB,EAAAC,EAAAC,cAACuB,EAAD,CACEpB,MAAOc,KAAKK,MAAMnB,MAClBQ,cAAeM,KAAKN,cACpBF,WAAYQ,KAAKR,WACjBF,cAAeU,KAAKV,uBAxBGiB,aCIhBC,MAJf,WACE,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0e5b148f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport ReplayIcon from \"@material-ui/icons/Replay\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\nimport \"./Counter.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst theme = createMuiTheme({\r\n  overrides: {\r\n    MuiIconButton: {\r\n      root: {\r\n        background: \"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\",\r\n        padding: \"25px\",\r\n        margin: \"0 10px\"\r\n      }\r\n    },\r\n    MuiTypography: {\r\n      body1: {\r\n        fontSize: \"80px\",\r\n        textAlign: \"center\"\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nconst Counter = props => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Typography>{props.count}</Typography>\r\n      <div className=\"container\">\r\n        <IconButton onClick={props.decreaseCount}>\r\n          <RemoveIcon />\r\n        </IconButton>\r\n        <IconButton onClick={props.resetCount}>\r\n          <ReplayIcon />\r\n        </IconButton>\r\n        <IconButton onClick={props.increaseCount}>\r\n          <AddIcon />\r\n        </IconButton>\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nCounter.propTypes = {\r\n  decreaseCount: PropTypes.func.isRequired,\r\n  resetCount: PropTypes.func.isRequired,\r\n  increaseCount: PropTypes.func.isRequired,\r\n  count: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"../views/Counter/Counter\";\r\n\r\nclass CounterContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      count: 0\r\n    };\r\n  }\r\n\r\n  increaseCount = () => {\r\n    this.setState({ count: this.state.count + 1 });\r\n  };\r\n  resetCount = () => {\r\n    this.setState({ count: 0 });\r\n  };\r\n  decreaseCount = () => {\r\n    this.setState({ count: this.state.count - 1 });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Counter\r\n        count={this.state.count}\r\n        increaseCount={this.increaseCount}\r\n        resetCount={this.resetCount}\r\n        decreaseCount={this.decreaseCount}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default CounterContainer;\r\n","import React from \"react\";\nimport CounterContainer from \"./containers/CounterContainer\";\n\nfunction App() {\n  return <CounterContainer />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}